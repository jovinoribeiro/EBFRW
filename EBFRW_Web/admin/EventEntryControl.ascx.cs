using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Data;

namespace EBFRW_Web.admin
{
    public partial class EventEntryControl : System.Web.UI.UserControl
    {
         Controller controller = new Controller();

        protected void Page_Load(object sender, EventArgs e)
        {
            if (!Page.IsPostBack)
            {
                rebind();
            }
        }

        private void rebind()
        {
            DataSet ds = controller.getAllEventList("RUN", DateTime.Now);
            localEventsGrid.DataSource = ds;
            localEventsGrid.DataBind();

            String userAuthenticated = (String)Session["userAuthenticated"];
            if (userAuthenticated != null && Boolean.Parse(userAuthenticated))
            {
                //localEventsGrid.AutoGenerateEditButton = true;
               // localEventsGrid.AutoGenerateDeleteButton = true;
               // localEventsGrid.AutoGenerateSelectButton = true;
               // localEventsGrid.DataBind();
            }
            else
            {
                this.addHyperLink(localEventsGrid);
                //localEventsGrid.AutoGenerateEditButton = true;
                //localEventsGrid.AutoGenerateDeleteButton = true;
                //localEventsGrid.AutoGenerateSelectButton = true;
                //localEventsGrid.DataBind();
            }
        }

        private void addHyperLink(GridView g)
        {
            int rowCount = g.Rows.Count;
            
            for (int i = 0; i < rowCount; i++)
            {
                String temp = g.Rows[i].Cells[5].Text;
                g.Rows[i].Cells[5].Text = "<a href=" + "\"http://" + temp + "\"" + "target=\"_blank\"" + ">" + temp + "</a>";
               
            }
        }

        protected BoundColumn CreateBoundColumn(DataColumn c, string[] col, int index)
        {
            BoundColumn column = new BoundColumn();
            column.DataField = c.ColumnName;
            column.HeaderText = col[index].ToString();
            column.DataFormatString = setFormating(c);

            return column;
        }

        private string setFormating(DataColumn bc)
        {
            string dataType = null;
            switch (bc.DataType.ToString())
            {
                case "System.Int32": dataType = "{0:#,###}";
                    break;
                case "System.Decimal":
                    dataType = "{0:c}"; break;
                case "System.DateTime": dataType = "{0:M/d/yyyy HH:mm:ss tt}"; break;
                case "System.String": dataType = ""; break;
                default: dataType = ""; break;
            }
            return dataType;
        }

        private void setUpHeaderStyle(DataGrid dg)
        {
            DataGridColumnCollection dgcc = dg.Columns;

            foreach (DataGridColumn dc in dgcc)
            {
                dc.HeaderStyle.CssClass = "htable";
            }

        }

        private void addHyperLink()
        {
            for (int i = 0; i < localEvents .Items.Count; i++)
            {
                String temp = localEvents.Items[i].Cells[5].Text;
                localEvents.Items[i].Cells[5].Text = "<a href=" + "\"http://" + temp + "\"" + "target=\"_blank\"" + ">" + temp + "</a>";
            }
        }

        protected void localEventsGrid_RowEditing(object sender, GridViewEditEventArgs e)
        {
            this.localEventsGrid.EditIndex = e.NewEditIndex;
            rebind();
        }
       
        protected void localEventsGrid_RowUpdating(object sender, GridViewUpdateEventArgs e)
        {

        }

        protected void localEventsGrid_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
        {

        }
        

    
    }
}


